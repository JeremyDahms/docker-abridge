/* eslint-disable camelcase */
const yaml = require("js-yaml");
const fs = require("fs");
const { resolve } = require("path");

const CONFIG_KEY = "x-docker_abridge";

const workingDirectory = process.env.ABRIDGE_WORKING_DIR || process.cwd();

const pathFromBase = (...args) => resolve(workingDirectory, ...args);

function readYaml(file) {
  return yaml.safeLoad(fs.readFileSync(pathFromBase(`${file}.yml`))) || {};
}

function readRawYaml(path) {
  return fs.readFileSync(pathFromBase(`${path}.yml`), "utf-8");
}

function getCurrent() {
  try {
    return readYaml("docker-compose");
  } catch (error) {
    if (error.code === "ENOENT") {
      return {}; // If the file doesn't exist return 'empty'
    }
    throw error;
  }
}

function getBase() {
  const raw = readYaml("base");
  delete raw[CONFIG_KEY];
  return raw;
}

function getService(service) {
  const raw = readYaml(`services/${service}`);
  delete raw[CONFIG_KEY];
  return (raw.services && Object.values(raw.services)[0]) || raw;
}

function getBaseConfig() {
  return readYaml("base")[CONFIG_KEY] || {};
}

function getServiceDefinition(service) {
  const serviceDefinition = readYaml(`services/${service}`);
  return serviceDefinition[service] || serviceDefinition.services[service];
}

function getServiceConfig(service) {
  const defaultConfig = getBaseConfig().service_defaults || {};
  const serviceConfig = readYaml(`services/${service}`)[CONFIG_KEY];
  return {
    ...setEnvironmentDefaultOverrides(defaultConfig),
    ...serviceConfig,
    context: pathFromBase(defaultConfig.base_context || "", serviceConfig.context || ""),
  };
}

function setEnvironmentDefaultOverrides(defaultConfig) {
  const variableMappings = {
    base_context: "BASE_CONTEXT",
    context: "CONTEXT",
    // build: "BUILD", // TODO Need to support an array
    artifacts: "ARTIFACTS",
  };
  Object.entries(variableMappings).forEach(([property, envVariable]) => {
    const envValue = process.env[`ABRIDGE_${envVariable}`];
    if (envValue) {
      // eslint-disable-next-line no-param-reassign
      defaultConfig[property] = envValue;
    }
  });
  return defaultConfig;
}

function writeComposeFile(composeConfig) {
  fs.writeFileSync(
    pathFromBase("docker-compose.yml"),
    `# This file is generated by docker-abridge\n${yaml.safeDump(composeConfig)}`
  );
}

module.exports = {
  readRawYaml,
  getCurrent,
  getBase,
  getService,
  getServiceDefinition,
  getServiceConfig,
  writeComposeFile,
  pathFromBase,
};
